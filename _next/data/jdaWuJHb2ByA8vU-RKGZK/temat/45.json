{"pageProps":{"subject":{"id":45,"name":"Punkt przeciÄ™cia prostych ","description":"","code":"#include <iostream>\r\n#include <fstream>\r\n#include <vector>\r\nusing namespace std;\r\n\r\nstruct Point\r\n{\r\n    int x, y;\r\n};\r\n\r\nstruct Line\r\n{\r\n    Point p, q;\r\n    int i;\r\n};\r\n\r\nstruct CommonFraction\r\n{\r\n    int numerator;\r\n    int denominator;\r\n};\r\n\r\nstruct FractionPoint\r\n{\r\n    CommonFraction x, y;\r\n};\r\n\r\nint det3(Point a, Point b, Point c)\r\n{\r\n    // | ax ay 1 |\r\n    // | bx by 1 |\r\n    // | cx cy 1 |\r\n    return a.x * b.y + a.y * c.x + b.x * c.y - b.y * c.x - a.x * c.y - a.y * b.x;\r\n}\r\n\r\nint det2(int matrix[2][2])\r\n{\r\n    return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];\r\n}\r\nFractionPoint intersectionPoint(Line &line1, Line &line2)\r\n{\r\n    int smallMatrix12[2][2] = {\r\n        {line1.p.x, line1.p.y},\r\n        {line1.q.x, line1.q.y}};\r\n    int smallMatrix34[2][2] = {\r\n        {line2.p.x, line2.p.y},\r\n        {line2.q.x, line2.q.y}};\r\n\r\n    int bigMatrixX[2][2] = {\r\n        {det2(smallMatrix12), line1.p.x - line1.q.x},\r\n        {det2(smallMatrix34), line2.p.x - line2.q.x}};\r\n\r\n    int bigMatrixY[2][2] = {\r\n        {det2(smallMatrix12), line1.p.y - line1.q.y},\r\n        {det2(smallMatrix34), line2.p.y - line2.q.y}};\r\n\r\n    int denominatorMatrix[2][2] = {\r\n        {line1.p.x - line1.q.x, line1.p.y - line1.q.y},\r\n        {line2.p.x - line2.q.x, line2.p.y - line2.q.y}};\r\n\r\n    int numeratorX = det2(bigMatrixX);\r\n    int numeratorY = det2(bigMatrixY);\r\n    int denominatorX = det2(denominatorMatrix);\r\n    int denominatorY = det2(denominatorMatrix);\r\n\r\n    FractionPoint fractionPoint = {\r\n        {numeratorX, denominatorX},\r\n        {numeratorY, denominatorY}};\r\n    return fractionPoint;\r\n}\r\n\r\nbool isParallelTo(Line &line1, Line &line2)\r\n{\r\n    int matrix[2][2] = {\r\n        {line1.p.x - line1.q.x, line1.p.y - line1.q.y},\r\n        {line2.p.x - line2.q.x, line2.p.y - line2.q.y}};\r\n    if ((det2(matrix) == 0) && (det3(line1.p, line1.q, line2.p) != 0))\r\n    {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nint main()\r\n{\r\n    fstream inputFile;\r\n    inputFile.open(\"linie.txt\");\r\n\r\n    ofstream resFile1, resFile2;\r\n    resFile1.open(\"wyniki1.txt\");\r\n    resFile2.open(\"wyniki2.txt\");\r\n\r\n    int N;\r\n    inputFile >> N;\r\n\r\n    Line firstLine;\r\n    inputFile >> firstLine.p.x;\r\n    inputFile >> firstLine.p.y;\r\n    inputFile >> firstLine.q.x;\r\n    inputFile >> firstLine.q.y;\r\n    firstLine.i = 1;\r\n\r\n    vector<Line> lines;\r\n    for (int i = 2; i <= N; ++i)\r\n    {\r\n        Line nextLine;\r\n        inputFile >> nextLine.p.x;\r\n        inputFile >> nextLine.p.y;\r\n        inputFile >> nextLine.q.x;\r\n        inputFile >> nextLine.q.y;\r\n        nextLine.i = i;\r\n        lines.push_back(nextLine);\r\n    }\r\n\r\n    vector<Line> intersectWithFirstLine;\r\n    vector<FractionPoint> intersectionPoints;\r\n\r\n    for (Line line : lines)\r\n    {\r\n        if (!isParallelTo(firstLine, line))\r\n        {\r\n            intersectWithFirstLine.push_back(line);\r\n            intersectionPoints.push_back(intersectionPoint(firstLine, line));\r\n        }\r\n    }\r\n\r\n    resFile1 << intersectWithFirstLine.size() << '\\n';\r\n    for (Line line : intersectWithFirstLine)\r\n    {\r\n        resFile1 << line.i << ' ';\r\n    }\r\n\r\n    for (FractionPoint point : intersectionPoints)\r\n    {\r\n        resFile2 << point.x.numerator << ' ' << point.x.denominator << ' '\r\n                 << point.y.numerator << ' ' << point.y.denominator << '\\n';\r\n    }\r\n\r\n    inputFile.close();\r\n    resFile1.close();\r\n    resFile2.close();\r\n\r\n    return 0;\r\n}"}},"__N_SSG":true}