{"pageProps":{"subject":{"id":52,"name":"Uproszczony algorytm Boyera-Moore'a","description":"","code":"#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nvoid boyerMoore(string pattern, string text, char alphabetStart, char alphabetEnd)\r\n{\r\n    vector<int> lastPos(alphabetEnd - alphabetStart, -1);\r\n\r\n    for (int i = 0; i < pattern.size(); ++i)\r\n    {\r\n        lastPos[pattern[i] - alphabetStart] = i;\r\n    }\r\n\r\n    int posFounded = -1;\r\n    int i = 0;\r\n    while (i <= text.size() - pattern.size())\r\n    {\r\n        int j = pattern.size() - 1;\r\n        while (j >= 0 && pattern[j] == text[i + j])\r\n        {\r\n            j--;\r\n        }\r\n        if (j >= 0)\r\n        {\r\n            i += max(1, j - lastPos[text[i + j] - alphabetStart]);\r\n        }\r\n        else\r\n        {\r\n            posFounded = i;\r\n            cout << posFounded << '\\n';\r\n            i++;\r\n        }\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    string p = \"ABC\";\r\n    string s = \"AAABBBCCCABCAAAABBBCABCBACBABCABC\";\r\n\r\n    boyerMoore(p, s, 'A', 'Z');\r\n\r\n    return 0;\r\n}"}},"__N_SSG":true}