{"pageProps":{"subject":{"id":27,"name":"Dowolna ścieżka w grafie - DFS","description":"Algorytmem DFS możemy znaleźć dowolną ścieżkę pomiędzy dwoma wierzchołkami w grafie. Jest to jednak ścieżka DOWOLNA, niekoniecznie najkrótsza!","code":"#include <iostream>\r\n#include <vector>\r\n#include <algorithm>\r\nusing namespace std;\r\n\r\nconstexpr int MAXN = 101;\r\nvector<int> graph[MAXN];\r\nbool vis[MAXN];\r\nint pred[MAXN];\r\n\r\nvoid dfs(int v, int p)\r\n{\r\n    vis[v] = true;\r\n    pred[v] = p;\r\n    for (int u : graph[v]) {\r\n        if (!vis[u]) {\r\n            dfs(u, v);\r\n        }\r\n    }\r\n}\r\n\r\nvector<int> construct_path(int end)\r\n{\r\n    vector<int> path;\r\n    int curr = end;\r\n    while (pred[curr] != -1) {\r\n        path.push_back(curr);\r\n        curr = pred[curr];\r\n    }\r\n    reverse(path.begin(), path.end());\r\n    return path;\r\n}\r\n\r\nint main()\r\n{\r\n    int n, m;\r\n    cin >> n >> m;\r\n    int a, b;\r\n    for (int i = 1; i <= m; ++i) {\r\n        cin >> a >> b;\r\n        graph[a].push_back(b);\r\n        graph[b].push_back(a);\r\n    }\r\n    int start, end;\r\n    cin >> start >> end;\r\n\r\n    dfs(start, -1);\r\n\r\n    vector<int> path = construct_path(end);\r\n    cout << \"Some path from \" << start << \" to \" << end << \":\\n\";\r\n    cout << start;\r\n    for (int i : path) {\r\n        cout << \" -> \" << i;\r\n    }\r\n}"}},"__N_SSG":true}