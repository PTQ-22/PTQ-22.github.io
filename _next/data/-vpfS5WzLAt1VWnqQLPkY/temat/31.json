{"pageProps":{"subject":{"id":31,"name":"Dijkstra","description":"Algorytm Dijkstry służy do znajdowania najkrótszej ścieżki w grafie ważonym. Nie działa dla ujemnych wag. W implementacji poniżej została wykorzystana kolejka priorytetowa z biblioteki STL. Zwraca ona największy element. W algorytmie Dijkstry potrzebujemy najmniejszej wartości, więc dodajemy wagi ze znakiem minus. ","code":"#include <iostream>\r\n#include <queue>\r\n#include <vector>\r\n#include <algorithm>\r\nusing namespace std;\r\n\r\nvoid dijkstra(int n, vector<vector<pair<int, int>>> &graph, int start, int end)\r\n{\r\n    vector<int> distances(n + 1, INT32_MAX);\r\n    vector<int> predecessors(n + 1, -1);\r\n\r\n    distances[start] = 0;\r\n\r\n    priority_queue<pair<int, int>> Q;\r\n    Q.push({0, start});\r\n\r\n    while (!Q.empty())\r\n    {\r\n        int v = Q.top().second;\r\n        Q.pop();\r\n\r\n        for (pair<int, int> p: graph[v]) {\r\n            int u = p.first;\r\n            int w = p.second;\r\n\r\n            if (distances[v] + w < distances[u]) {\r\n                distances[u] = distances[v] + w;\r\n                predecessors[u] = v;\r\n                Q.push({-w, u});\r\n            }\r\n        }\r\n    }\r\n\r\n    vector<int> path;\r\n    int c = end;\r\n    while (predecessors[c] != -1) {\r\n        c = predecessors[c];\r\n        path.push_back(c);\r\n    }\r\n    reverse(path.begin(), path.end());\r\n\r\n    cout << \"Distances from \" << start << \" to:\\n\";\r\n    for (int i = 1; i <= n; ++i) {\r\n        cout << i << \": \" << distances[i] << '\\n';\r\n    }\r\n\r\n    cout << \"\\nShortest path from \" << start << \" to \" << end << '\\n';\r\n    for (int i : path) {\r\n        cout << i << \" => \";\r\n    } \r\n    cout << end;\r\n}\r\n\r\nint main()\r\n{\r\n    int n, m;\r\n    cin >> n >> m;\r\n\r\n    vector<vector<pair<int, int>>> graph(n + 1, vector<pair<int, int>>());\r\n\r\n    int a, b, w;\r\n    for (int i = 0; i < m; ++i)\r\n    {\r\n        cin >> a >> b >> w;\r\n        graph[a].push_back({b, w});\r\n    }\r\n\r\n    dijkstra(n, graph, 1, n);\r\n\r\n    return 0;\r\n}"}},"__N_SSG":true}