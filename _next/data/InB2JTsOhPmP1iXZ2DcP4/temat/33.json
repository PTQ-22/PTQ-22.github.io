{"pageProps":{"subject":{"id":33,"name":"Cykl Eulera w grafie nieskierowanym","description":"","code":"#include <iostream>\r\n#include <queue>\r\nusing namespace std;\r\n\r\nconst int MAXN = 1'001;\r\nbool graph[MAXN][MAXN];\r\nint vis[MAXN];\r\n\r\nvoid checkConnectivity(int v, int n, int &vCounter)\r\n{\r\n    vis[v] = true;\r\n    vCounter++;\r\n    for (int u = 1; u <= n; ++u)\r\n    {\r\n        if (graph[v][u])\r\n        {\r\n            if (!vis[u])\r\n            {\r\n                checkConnectivity(u, n, vCounter);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nbool isEulerCyclePossible(int n)\r\n{\r\n    int vCounter = 0;\r\n    checkConnectivity(1, n, vCounter);\r\n\r\n    if (vCounter != n)\r\n    {\r\n        cout << \"Given graph is not connected!\\n\";\r\n        return false;\r\n    }\r\n\r\n    for (int v = 1; v <= n; ++v)\r\n    {\r\n        int vDegree = 0;\r\n        for (int i = 1; i <= n; ++i)\r\n        {\r\n            if (graph[v][i])\r\n            {\r\n                vDegree++;\r\n            }\r\n        }\r\n        if (vDegree % 2 == 1)\r\n        {\r\n            cout << \"Given graph has vertex with odd degree!\\n\";\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nvoid eulerDFS(int v, int n, queue<int> &Q)\r\n{\r\n    for (int u = 1; u <= n; ++u)\r\n    {\r\n        if (graph[v][u])\r\n        {\r\n            graph[v][u] = false;\r\n            graph[u][v] = false;\r\n            eulerDFS(u, n, Q);\r\n        }\r\n    }\r\n    Q.push(v);\r\n}\r\n\r\nvoid eulerCycle(int n)\r\n{\r\n    queue<int> Q;\r\n\r\n    eulerDFS(1, n, Q);\r\n\r\n    while (!Q.empty())\r\n    {\r\n        cout << Q.front() << ' ';\r\n        Q.pop();\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    int n, m;\r\n    cin >> n >> m;\r\n\r\n    int a, b;\r\n    for (int i = 1; i <= m; ++i)\r\n    {\r\n        cin >> a >> b;\r\n        graph[a][b] = true;\r\n        graph[b][a] = true;\r\n    }\r\n\r\n    if (isEulerCyclePossible(n))\r\n    {\r\n        cout << \"Euler cycle:\\n\";\r\n        eulerCycle(n);\r\n    }\r\n    else\r\n    {\r\n        cout << \"Euler cycle not possible\\n\";\r\n    }\r\n\r\n    return 0;\r\n}\r\n"}},"__N_SSG":true}