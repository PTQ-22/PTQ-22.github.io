{"pageProps":{"subject":{"id":26,"name":"BFS - lista","description":"","code":"#include <iostream>\r\n#include <vector>\r\n#include <queue>\r\nusing namespace std;\r\n\r\nconstexpr int MAXN = 102;\r\nconstexpr int INF = 1e9;\r\nvector<int> graph[MAXN];\r\nint dist[MAXN];\r\n\r\nvoid bfs(int start)\r\n{\r\n    queue<int> Q;\r\n\r\n    dist[start] = 0;\r\n    Q.push(start);\r\n\r\n    while(!Q.empty()) {\r\n        int v = Q.front();\r\n        Q.pop();\r\n        for (int u : graph[v]) {\r\n            if (dist[u] == INF) {\r\n                dist[u] = dist[v] + 1;\r\n                Q.push(u);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    int n, m;\r\n    cin >> n >> m;\r\n    int a, b;\r\n    for (int i = 1; i <= m; ++i) {\r\n        cin >> a >> b;\r\n        graph[a].push_back(b);\r\n        graph[b].push_back(a);\r\n    }\r\n\r\n    for (int i = 1; i <= n; ++i) {\r\n        dist[i] = INF;\r\n    }\r\n\r\n    for (int i = 1; i <= n; ++i) {\r\n        if (dist[i] == INF) {\r\n            bfs(i);\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}"}},"__N_SSG":true}