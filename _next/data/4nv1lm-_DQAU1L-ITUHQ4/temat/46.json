{"pageProps":{"subject":{"id":46,"name":"Pole wielokąta wypukłego","description":"","code":"#include <iostream>\r\n#include <vector>\r\n#include <cmath>\r\n#include <set>\r\n#include <iomanip>\r\nusing namespace std;\r\n\r\nstruct Point\r\n{\r\n    int x;\r\n    int y;\r\n};\r\n\r\nstruct Triangle\r\n{\r\n    Point a, b, c;\r\n};\r\n\r\ndouble distance(Point a, Point b)\r\n{\r\n    return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\r\n}\r\n\r\ndouble triangleHeronField(Triangle tr)\r\n{\r\n    double a = distance(tr.c, tr.b);\r\n    double b = distance(tr.a, tr.c);\r\n    double c = distance(tr.a, tr.b);\r\n\r\n    double p = (a + b + c) / 2;\r\n\r\n    return sqrt(p * (p - a) * (p - b) * (p - c));\r\n}\r\n\r\ndouble polygonFieldFromFirstPoint(vector<Point> &points)\r\n{\r\n    double field = 0;\r\n    for (int i = 2; i < points.size(); ++i)\r\n    {\r\n        Triangle tr = {points[0], points[i - 1], points[i]};\r\n        field += triangleHeronField(tr);\r\n    }\r\n    return field;\r\n}\r\n\r\ndouble polygonFieldFromAnyPoint(vector<Point> &points, Point anyPoint)\r\n{\r\n    double field = 0;\r\n    int n = points.size();\r\n    for (int i = 1; i < n; ++i)\r\n    {\r\n        Triangle tr = {anyPoint, points[i - 1], points[i]};\r\n        field += triangleHeronField(tr);\r\n    }\r\n    Triangle tr = {anyPoint, points[n - 1], points[0]};\r\n    field += triangleHeronField(tr);\r\n    return field;\r\n}\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n\r\n    int n;\r\n    cin >> n;\r\n\r\n    vector<Point> points(n);\r\n    for (int i = 0; i < n; ++i)\r\n    {\r\n        Point p;\r\n        cin >> p.x >> p.y;\r\n        points[i] = p;\r\n    }\r\n\r\n    double fieldFromFirstPoint = polygonFieldFromFirstPoint(points);\r\n    cout << setprecision(1) << fixed;\r\n    cout << fieldFromFirstPoint << '\\n';\r\n\r\n    int m;\r\n    cin >> m;\r\n\r\n    while (m--)\r\n    {\r\n        Point p;\r\n        cin >> p.x >> p.y;\r\n        double fieldFromAnyPoint = polygonFieldFromAnyPoint(points, p);\r\n        if (fabs(fieldFromFirstPoint - fieldFromAnyPoint) < 0.01)\r\n        {\r\n            cout << \"TAK\\n\";\r\n        }\r\n        else\r\n        {\r\n            cout << \"NIE\\n\";\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}\r\n"}},"__N_SSG":true}