{"pageProps":{"subject":{"id":17,"name":"Lista jednokierunkowa","description":"<p><strong>Lista jednokierunkowa</strong> - lista, czyli struktura o dynamicznie zmieniającej się wielkości, w której każdy element wskazuje na element za nim. Umożliwia to przeglądanie listy tylko w jedną stronę. Do listy jednokierunkowej w tej implementacji można dodać element w dowolnym miejscu oraz usunąć z początku oraz końca.</p>","code":"struct Person {\r\n    string name, surname;\r\n    int age;\r\n};\r\n\r\nstruct Element {\r\n    Person person;\r\n    Element* next;\r\n};\r\n\r\nElement* first = nullptr;\r\nElement* last = nullptr;\r\n\r\n// dodanie na koniec -> identycznie jak w kolejce\r\nvoid push_back(Person person) {\r\n    Element* tmp = new Element;\r\n    tmp->person = person;\r\n    tmp->next = nullptr;\r\n\r\n    if (first == nullptr) {\r\n        first = tmp;\r\n        last = tmp;\r\n    }\r\n    else {\r\n        last->next = tmp;\r\n        last = tmp;\r\n    }\r\n}\r\n\r\n// dodanie na początek\r\nvoid push_front(Person person) {\r\n    Element* tmp = new Element;\r\n    tmp->person = person;\r\n    tmp->next = first; \r\n\r\n    if (first == nullptr) {\r\n        last = tmp;\r\n    }\r\n    first = tmp;\r\n}\r\n\r\n// dodanie za osobą o podanym indeksie\r\nvoid push_behind(Person person, int index) {\r\n    Element* ptr = first;\r\n    for (int i = 0; i < index; ++i) {\r\n        ptr = ptr->next;\r\n        if (ptr == nullptr) return;\r\n    }\r\n    Element* tmp = new Element;\r\n    tmp->person = person;\r\n    tmp->next = ptr->next;\r\n\r\n    ptr->next = tmp;\r\n}\r\n\r\n// dodanie za osobą o podanym imieniu\r\nvoid push_behind_name(Person new_person, string behind_who) {\r\n\tElement* ptr = first;\r\n\r\n\twhile (ptr->person.name != behind_who) {\r\n\t    ptr = ptr->next;\r\n\t\tif (ptr == nullptr) return;\r\n\t}\r\n\r\n\tElement* tmp = new Element;\r\n\ttmp->person = new_person;\r\n\ttmp->next = ptr->next;\r\n\r\n\tptr->next = tmp;\r\n}\r\n\r\n// usuwa ostatni element i zwraca\r\n// strukturę osoby z tego elementu\r\nPerson pop_back() {\r\n    Element* ptr = first;\r\n    while (ptr->next != last) {\r\n        ptr = ptr->next;\r\n    }\r\n    Person result = last->person;\r\n    ptr->next = nullptr;\r\n    last = ptr;\r\n    return result;\r\n}\r\n\r\nPerson pop_front() {\r\n    Person result = first->person;\r\n    first = first->next;\r\n    return result;\r\n}\r\n\r\nvoid printList() {\r\n    Element* ptr = first;\r\n\twhile (ptr != nullptr) {\r\n\t\tPerson p = ptr->person;\r\n\t\tcout << p.name << ' ' << p.surname << ' ' << p.age << '\\n';\r\n\t\tptr = ptr->next;\r\n\t}\r\n}"}},"__N_SSG":true}