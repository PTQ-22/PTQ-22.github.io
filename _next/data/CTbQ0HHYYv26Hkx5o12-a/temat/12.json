{"pageProps":{"subject":{"id":12,"name":"Vigenere'a","description":"<p>Szyfr Vigenere’a - polialfabetyczny szyfr podstawieniowy. Jego działanie\r\n            jest oparte na tablicy dwuwymiarowej, której każdy wiersz jest następnym\r\n                alfabetem przesuniętym szyfrem Cezara o klucze od 0.</p>\r\n            <p>Kolejne znaki szyfrogramu to litery z wiersza wyznaczonego przez literę\r\n            teksu jawnego i kolumnę litery klucza. Klucz musi mieć taką samą długość\r\n            jak tekst, więc w przypadku krótszego klucza powielamy go aż do uzyskania\r\n                długości tekstu jawnego.</p>\r\n            <p>Szyfr Vigenere’a możemy uczynić samoodwracalnym odpowiednio odwracając klucz.</p>","code":"const int LETTERS = 26;\r\nchar alphabets[LETTERS][LETTERS];\r\n\r\nstring reverse_key(string key)\r\n{\r\n    string new_key = \"\";\r\n    for (char c : key) {\r\n        new_key += char(((LETTERS - (c - 'A')) % LETTERS) + 'A');\r\n    }\r\n    return new_key;\r\n}\r\n\r\nvoid generate_alphabets()\r\n{\r\n    for (int i = 0; i < LETTERS; ++i) {\r\n        for (int j = 0; j < LETTERS; ++j) {\r\n            alphabets[i][j] = ((j + i) % LETTERS) + 'A';\r\n        }\r\n    }\r\n}\r\n\r\nbool is_upper_case_letter(char x)\r\n{\r\n    if (x >= 'A' && x <= 'Z') {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nstring resize_key(string text, string key)\r\n{\r\n    string new_key = \"\";\r\n    int key_counter = 0;\r\n    for (int i = 0; i < text.length(); ++i) {\r\n        if (is_upper_case_letter(text[i])) {\r\n            new_key += key[key_counter];\r\n            if (++key_counter == key.length()) {\r\n                key_counter = 0;\r\n            }\r\n        }\r\n        else {\r\n            new_key += text[i];\r\n        }\r\n    }\r\n    return new_key;\r\n}\r\n\r\nstring vigenere(string text, string key)\r\n{\r\n    generate_alphabets();\r\n    string complete_key = resize_key(text, key);\r\n    string encrypted = \"\";\r\n    for (int i = 0; i < text.length(); ++i) {\r\n        if (is_upper_case_letter(text[i])) {\r\n            int row = text[i] - int('A');\r\n            int col = complete_key[i] - int('A');\r\n            encrypted += alphabets[row][col];\r\n        }\r\n        else {\r\n            encrypted += text[i];\r\n        }\r\n    }\r\n    return encrypted;\r\n}"}},"__N_SSG":true}