{"pageProps":{"subject":{"id":48,"name":"Otoczka wypuk≈Ça - Algorytm Jarvisa","description":"","code":"#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nstruct Point\r\n{\r\n    int x, y;\r\n};\r\n\r\ndouble cosine(int x, int y, int w)\r\n{\r\n    return w * x / sqrt(x * x + y * y);\r\n}\r\n\r\nPoint findNextPoint(Point current, vector<Point> &points, int unitVectorVal)\r\n{\r\n    double maxiAngleCosine = -1;\r\n    Point maxiPoint = current;\r\n    int maxiPointIndex = 0;\r\n    for (int i = 0; i < points.size(); ++i)\r\n    {\r\n        if ((unitVectorVal == 1 && points[i].y >= current.y) || (unitVectorVal == -1 && points[i].y <= current.y))\r\n        {\r\n            double angleCosine = cosine(points[i].x - current.x, points[i].y - current.y, unitVectorVal);\r\n            if (angleCosine > maxiAngleCosine)\r\n            {\r\n                maxiPoint = points[i];\r\n                maxiAngleCosine = angleCosine;\r\n                maxiPointIndex = i;\r\n            }\r\n        }\r\n    }\r\n    return maxiPoint;\r\n}\r\n\r\nvoid jarvis(vector<Point> &points, int n)\r\n{\r\n    Point pMin = points[0];\r\n    Point pMax = points[0];\r\n    for (int i = 1; i < n; ++i)\r\n    {\r\n        if (points[i].y < pMin.y || (points[i].y == pMin.y && points[i].x < pMin.x))\r\n        {\r\n            pMin = points[i];\r\n        }\r\n        if (points[i].y > pMax.y || (points[i].y == pMax.y && points[i].x > pMax.x))\r\n        {\r\n            pMax = points[i];\r\n        }\r\n    }\r\n\r\n    vector<Point> convexHull;\r\n\r\n    int unitVectorVal = 1;\r\n    Point currentPoint = pMin;\r\n    while (currentPoint.x != pMax.x || currentPoint.y != pMax.y)\r\n    {\r\n        convexHull.push_back(currentPoint);\r\n        currentPoint = findNextPoint(currentPoint, points, unitVectorVal);\r\n    }\r\n\r\n    unitVectorVal = -1;\r\n    currentPoint = pMax;\r\n    while (currentPoint.x != pMin.x || currentPoint.y != pMin.y)\r\n    {\r\n        convexHull.push_back(currentPoint);\r\n        currentPoint = findNextPoint(currentPoint, points, unitVectorVal);\r\n    }\r\n\r\n    convexHull.push_back(pMin);\r\n\r\n    cout << '\\n';\r\n    cout << \"Convex Hull: \\n\";\r\n    for (Point p : convexHull)\r\n    {\r\n        cout << p.x << ' ' << p.y << '\\n';\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    int n;\r\n    cin >> n;\r\n    vector<Point> points(n);\r\n    for (int i = 0; i < n; ++i)\r\n    {\r\n        cin >> points[i].x >> points[i].y;\r\n    }\r\n\r\n    jarvis(points, n);\r\n\r\n    return 0;\r\n}"}},"__N_SSG":true}