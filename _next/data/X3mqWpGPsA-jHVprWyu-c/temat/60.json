{"pageProps":{"subject":{"id":60,"name":"BFS","description":"<div style=\"width: 100%; display: flex; justify-content: center; align-items: center; flex-direction: column; gap: 1px; user-select: all; color: white;\">\r\nlabirynt.txt\r\n\r\n<pre>\r\n<code>\r\nXXX XXXXXX\r\nX X X    X\r\nX X    X X\r\nX XXXX XXX\r\nX X@X  X X\r\nX        X\r\nXXXXXXXXXX</code></pre></div>","code":"#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\npair<int, int> start_pos;\r\nvector<vector<bool>> visited;\r\nvector<vector<pair<int, int>>> pred;\r\nvector<string> grid;\r\nint width;\r\nint height;\r\nconst vector<pair<int, int>> MOVES = {\r\n    {0, 1}, {1, 0}, {-1, 0}, {0, -1}\r\n};\r\n\r\nvoid bfs()\r\n{\r\n    queue<pair<int, int>> q;\r\n    q.push(start_pos);\r\n    visited[start_pos.first][start_pos.second] = true;\r\n\r\n    pair<int, int> end;\r\n\r\n    while(q.size())\r\n    {\r\n        pair<int, int> v = q.front();\r\n        q.pop();\r\n\r\n        if (v.first == 0 || v.second == 0 || v.first == height - 1 || v.second == width - 1)\r\n        {\r\n            end = v;\r\n            break;\r\n        }\r\n\r\n        for (auto move : MOVES) {\r\n            int y = v.first + move.first;\r\n            int x = v.second + move.second;\r\n            if (grid[y][x] != 'X' && !visited[y][x]) {\r\n                q.push({y, x});\r\n                visited[y][x] = true;\r\n                pred[y][x] = {v.first, v.second};\r\n            }\r\n        }\r\n    }\r\n    vector<pair<int, int>> path;\r\n    while(pred[end.first][end.second] != make_pair(-1, -1)) {\r\n        path.push_back(end);\r\n        end = pred[end.first][end.second];\r\n    }\r\n    for (auto p : path) {\r\n        grid[p.first][p.second] = '.';\r\n    }\r\n    cout << \"SHORTEST EXIT FROM MAZE: \\n\";\r\n    cout << \"LENGTH: \" << path.size() << \"\\n\\n\";\r\n    for (string line : grid) {\r\n        cout << line << '\\n';\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    fstream file;\r\n    file.open(\"labirynt.txt\");\r\n\r\n    string line;\r\n    int i = 0;\r\n    while (getline(file, line))\r\n    {\r\n        grid.push_back(line);\r\n        for (int j = 0; j < line.size(); ++j) {\r\n            if (line[j] == '@') {\r\n                start_pos = {i, j};\r\n            }\r\n        }\r\n        i++;\r\n    }\r\n\r\n    height = grid.size();\r\n    width = grid[0].size();\r\n\r\n    visited.resize(height, vector<bool>(width, false));\r\n    pred.resize(height, vector<pair<int, int>>(width, {-1, -1}));\r\n\r\n    bfs();\r\n\r\n    file.close();\r\n    return 0;\r\n}"}},"__N_SSG":true}