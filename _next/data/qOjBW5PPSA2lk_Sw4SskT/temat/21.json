{"pageProps":{"subject":{"id":21,"name":"Macierz sÄ…siedztwa","description":"","code":"#include <iostream>\r\n#include <vector>\r\n#include <fstream>\r\nusing namespace std;\r\n\r\nvoid load_undirected_unweighted(ifstream& file, int m, vector<vector<int>>& graph)\r\n{\r\n    int a, b;\r\n    for (int i = 1; i <= m; ++i) {\r\n        file >> a >> b;\r\n        graph[a][b] = 1;\r\n        graph[b][a] = 1;\r\n    }\r\n}\r\n\r\nvoid load_undirected_weighted(ifstream& file, int m, vector<vector<int>>& graph)\r\n{\r\n    int a, b, c;\r\n    for (int i = 1; i <= m; ++i) {\r\n        file >> a >> b >> c;\r\n        graph[a][b] = c;\r\n        graph[b][a] = c;\r\n    }\r\n}\r\n\r\nvoid load_directed_unweighted(ifstream& file, int m, vector<vector<int>>& graph)\r\n{\r\n    int a, b;\r\n    for (int i = 1; i <= m; ++i) {\r\n        file >> a >> b;\r\n        graph[a][b] = 1;\r\n    }\r\n}\r\n\r\nvoid load_directed_weighted(ifstream& file, int m, vector<vector<int>>& graph)\r\n{\r\n    int a, b, c;\r\n    for (int i = 1; i <= m; ++i) {\r\n        file >> a >> b >> c;\r\n        graph[a][b] = c;\r\n    }\r\n}\r\n\r\nbool edge_exists(vector<vector<int>>& graph, int a, int b)\r\n{\r\n    if (graph[a][b] != 0) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nint main()\r\n{\r\n    ifstream file1, file2;\r\n\r\n    file1.open(\"graf1.txt\");\r\n\r\n    int n, m;\r\n    file1 >> n >> m;\r\n\r\n    vector<vector<int>> graph1(n + 1, vector<int>(n + 1, 0));\r\n\r\n    load_undirected_unweighted(file1, m, graph1);\r\n\r\n    file1.close();\r\n\r\n    file2.open(\"graf2.txt\");\r\n\r\n    file2 >> n >> m;\r\n\r\n    vector<vector<int>> graph2(n + 1, vector<int>(n + 1, 0));\r\n\r\n    load_undirected_weighted(file2, m, graph2);\r\n\r\n    file2.close();\r\n\r\n    return 0;\r\n}\r\n"}},"__N_SSG":true}